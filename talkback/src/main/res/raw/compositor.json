// Turn to the non-strict mode json: REFERTO
{
  "events": {
    // These hint events deal with focus-event hints, not window-event hints.
    "Hint": {
      "ttsOutput": {
        "switch": "$event.hintType",
        "cases": {
          "access_focus": {
            "if": "$node.isAccessibilityFocused",
            "then": "%get_hint_from_node"
          },
          "input_focus": {
            "if": "$global.enableUsageHint && $node.isFocused",
            "then": "%get_input_focus_hint_from_node"
          },
          "screen": {
            "if": "$global.enableUsageHint",
            "then":"$event.hintText"
          },
          "selector": {
            "if": "$global.enableUsageHint",
            "then":"$event.hintText"
          },
          "text_suggestion": {
            "if": "$global.enableUsageHint && $global.hasReadingMenuActionsSetting",
              "then": {
                "if": "$global.currentReadingMenu == 'ACTIONS'",
                "then": "@string/template_hint_reading_menu_actions_for_spelling_suggestion($gesture.readingMenuSelectedSettingNextActionShortcut)",
                "else": "@string/template_hint_reading_menu_spelling_suggestion($gesture.readingMenuNextSettingShortcut)"
              },
            "else":"@string/hint_suggestion"
          }
        }
      },
      "refreshSourceNode": true,
      "ttsQueueMode": "queue",
      "ttsForceFeedbackEvenIfAudioPlaybackActive": "$event.hintForceFeedbackEvenIfAudioPlaybackActive",
      "ttsForceFeedbackEvenIfMicrophoneActive": false,
      "ttsForceFeedbackEvenIfSsbActive": false
    },
    // Accessibility Events.
    "TYPE_VIEW_ACCESSIBILITY_FOCUSED": {
      "ttsOutput": {
        "join": [
          {
            "if": "equals($node.unlabelledDescription, @string/value_unlabelled)",
            "then": {
              "fallback": [
                "$event.description",
                "@string/value_unlabelled"
              ]
            },
            "else": {
              "fallback": [
                "%get_description_for_tree",
                "$event.description"
              ]
            }
          },
          {
            "fallback": [
              {
                "if": "$verbosity.speakCollectionInfo",
                "then": "$collection.itemTransition"
              },
              {
                "_comment": "Don't announce heading for web container.",
                "_comment": "REFERTO and REFERTO for details.",
                "if": "$verbosity.speakRole",
                "then": {
                  "if": "!$node.isWebContainer && $node.isHeading",
                  "then": {
                    "fallback": [
                      "$node.roleDescription",
                      "@string/heading_template"
                    ]
                  }
                }
              }
            ]
          },
          {
            "if": "$verbosity.speakCollectionInfo",
            "then": "$collection.transition"
          },
          "%window_transition"
        ]
      },
      "ttsQueueMode": {
        "if":"$event.isInitialFocus",
        "then":"queue",
        "else":"flush"
      },
      "ttsAddToHistory": true,
      "ttsForceFeedbackEvenIfAudioPlaybackActive": "$event.forceFeedbackEvenIfAudioPlaybackActive",
      "ttsForceFeedbackEvenIfMicrophoneActive": {
        "if": "$event.isInitialFocus",
        "then": false,
        "else": "$event.forceFeedbackEvenIfMicrophoneActive"
      },
      "ttsForceFeedbackEvenIfSsbActive": {
        "if": "$event.isInitialFocus",
        "then": false,
        "else": "$event.forceFeedbackEvenIfSsbActive"
      },
      "advanceContinuousReading": true,
      "earcon": {
        "if": "($node.windowType == 'split_screen_divider') && ($windows.lastWindowId != $node.windowId)",
        "then": "@raw/complete",
        "else": {
          "if": "$focus.isLastFocusInScrollableNode != $focus.isCurrentFocusInScrollableNode",
          "then": {
            "if": "$focus.isCurrentFocusInScrollableNode",
            "then": "@raw/chime_up",
            "else": "@raw/chime_down"
          },
          "else": {
            "if": "$node.isActionable",
            "then": "@raw/focus_actionable",
            "else": "@raw/focus"
          }
        }
      },
      "haptic": {
        "if": "$node.isActionable",
        "then": "@array/view_actionable_pattern",
        "else": "@array/view_hovered_pattern"
      },
      "preventDeviceSleep": true
    },
    "TYPE_WINDOW_CONTENT_CHANGED": {
      // From speechstrategy.xml
      "ttsOutput": {
        "if": "$node.liveRegion != 'none'",
        "then": {
          "if":  "$node.notFrequentAnnounced",
          "then": "%get_description_for_tree"
        },
        "else": {
          "switch": "$event.contentChangeTypes",
            "cases": {
              "content_description": {
                "if": "$node.isWithinAccessibilityFocus && ($node.notFrequentAnnounced)",
                "then": "$event.contentDescription"
              },
              "text": {
                "_comment": "EditText will handled by TYPE_VIEW_TEXT_CHANGED",
                "if": "$node.isWithinAccessibilityFocus && ($node.role != 'edit_text') && ($node.notFrequentAnnounced)",
                "then": "$node.text"
              },
              "state_description": {
                "if": "$node.isWithinAccessibilityFocus && ($node.notFrequentAnnounced)",
                "then": {
                  "fallback": [
                    {
                      "if": "$node.role == 'seek_control'",
                      "then": "%get_description_for_node"
                    },
                    // The changed part of state-description is in the event text.
                    "$event.aggregateText",
                    "$node.stateDescription",
                    {
                      "_comment": "Android widget Progressbar used to send TYPE_VIEW_SELECTED event when ",
                      "_comment": "progress changes. It then adopted StateDescription. However, if a new ",
                      "_comment": "widget wants to provide the RangeInfo data only without state ",
                      "_comment": "description, we can use state change event to announce state changes",
                      "if": "$node.role == 'progress_bar'",
                      "then": "%seek_bar_percent"
                    }
                  ]
                }
              },
              "drag_started": "@string/drag_started",
              "drag_dropped": "@string/drag_dropped",
              "drag_cancelled":"@string/drag_cancelled",
              // When an error should be displayed, send
              // AccessibilityEvent#CONTENT_CHANGE_TYPE_INVALID. At this point talkback should
              // indicate the presence of an error to the user. REFERTO.
              "undefined": "$node.errorText",
              "error": "$node.errorText",
              "enabled": "$node.enabledState"
            }
        }
      },
      "ttsForceFeedbackEvenIfAudioPlaybackActive": true,
      "ttsForceFeedbackEvenIfMicrophoneActive": false,
      "ttsForceFeedbackEvenIfSsbActive": false,
      "earcon": {
        "switch": "$node.role",
        "cases": {
          "progress_bar": {
            "if": "$event.sourceIsNull || $node.isFocused || $node.isAccessibilityFocused || $node.liveRegion != 'none'",
            "then": {
              "if": "length($event.text) == 0 || $event.description == $node.text",
              "then": "@raw/scroll_tone"
            }
          }
        },
        "default": ""
      },
      "earcon_rate": "$event.progressBarEarconRate",
      "earcon_volume": {
        "if": "$node.role == 'progress_bar'",
        "then": "0.5"
      },
      "ttsQueueMode": {
        "switch": "$event.sourceRole",
        "cases": {
          "progress_bar": {
            "if": "$node.liveRegion == 'assertive'",
            "then": "interrupt",
            "else": "uninterruptible"
          },
          "seek_control": "uninterruptible"
        },
        "default": {
          "if": "$node.liveRegion == 'assertive'",
          "then": "interrupt",
          "else": "queue"
        }
      },
      "ttsClearQueueGroup": {
        "switch": "$node.role",
        "cases": {
          "progress_bar": "progress_bar",
          "seek_control": "seek_progress"
        },
        "default": {
          "switch": "$event.contentChangeTypes",
          "cases": {
            "content_description": "content_change",
            "text": "content_change",
            "state_description": "content_change"
          }
        }
      },
      "refreshSourceNode": "$node.liveRegion != 'none'",
      "ttsAddToHistory": true,
      "ttsSkipDuplicate": true
    },
    "TYPE_VIEW_SELECTED": {
      "ttsOutput": {
        "switch": "$node.role",
        "cases": {
          "seek_control": "%rule_seek_bar",
          "progress_bar": {
            "if": "$event.sourceIsNull || $node.isFocused || $node.isAccessibilityFocused || $node.liveRegion != 'none'",
            "then": {
              "if": "length($event.text) > 0 && $event.description != $node.text",
              "then": "$event.description",
              "else": "%get_seek_bar_state"
            }
          }
        },
        "default": "$event.description"
        // From speechstrategy.xml
      },
      "ttsAddToHistory": true,
      "ttsForceFeedbackEvenIfAudioPlaybackActive": true,
      "ttsForceFeedbackEvenIfMicrophoneActive": true,
      "ttsForceFeedbackEvenIfSsbActive": false,
      "earcon": {
        "switch": "$node.role",
        "cases": {
          "seek_control": "",
          "progress_bar": {
            "if": "$event.sourceIsNull || $node.isFocused || $node.isAccessibilityFocused || $node.liveRegion != 'none'",
            "then": {
              "if": "length($event.text) > 0 && $event.description != $node.text",
              "then": "",
              "else": "@raw/scroll_tone"
            }
          }
        },
        "default": {
          // From speechstrategy.xml
          "if": "!$event.description",
          "then": "@raw/focus_actionable"
        }
      },
      "earcon_rate": "$event.progressBarEarconRate",
      "earcon_volume": {
        "if": "$node.role == 'progress_bar'",
        "then": "0.5"
      },
      "haptic": {
        "switch": "$node.role",
        "cases": {
          "seek_control": "",
          "progress_bar": ""
          // From ProgressBarFormatter
        },
        "default": {
          // From speechstrategy.xml
          "if": "!$event.description",
          "then": "@array/view_focused_or_selected_pattern"
        }
      },
      "ttsQueueMode": {
        "switch": "$event.sourceRole",
        "cases": {
          "progress_bar": {
            "if": "$node.liveRegion == 'assertive'",
            "then": "interrupt",
            "else": "uninterruptible"
          },
          "action_bar_tab": "uninterruptible",
          // From speechstrategy.xml
          "tab_bar": "uninterruptible"
        }
      },
      "ttsClearQueueGroup": {
        "switch": "$node.role",
        "cases": {
          "progress_bar": "progress_bar",
          "seek_control": "seek_progress"
        }
      },
      "ttsSkipDuplicate": "$node.role == 'progress_bar' || $node.role == 'seek_control'"
    },
    "EVENT_INPUT_DESCRIBE_NODE": {
      "ttsOutput": "%get_description_for_node",
      "ttsAddToHistory": true,
      "ttsForceFeedbackEvenIfAudioPlaybackActive": true,
      "ttsForceFeedbackEvenIfMicrophoneActive": true,
      "ttsForceFeedbackEvenIfSsbActive": true,
      "advanceContinuousReading": true,
      "ttsQueueMode": "queue"
    }
  },
  "named_nodes": {
    // Windows
    "window_transition": {
      // When the accessibility focus is moved to another window, Talkback reads the window title.
      // However, if the accessibility focus is automatically moved by the Enhanced focus function
      // by changing to split screen mode, the window title is not read.
      // So user can not know the window which the accessibility focus is located.
      // Even, if it is not navigation by user, the title should be read in split screen mode.
      "if": "($event.isNavigateByUser || $windows.isSplitScreenMode) && $node.windowId != $windows.lastWindowId",
      "then": {
        "if": "$node.windowType == 'picture_in_picture'",
        "then": "@string/template_overlay_window($windows.currentWindowTitle)",
        "else": {
          "if": "($node.windowType != 'system' && $node.windowType != 'input_method') || $verbosity.speakSystemWindowTitles",
          "then": "@string/in_window_with_name($windows.currentWindowTitle)"
        }
      }
    },
    // Nodes
    "get_description_for_tree": {
      "switch": "$verbosity.descriptionOrder",
      "cases": {
        "StateNameRolePosition": {
          "join": [
            "$node.notifySelected",
            "%tree_description_with_label",
            "$node.notifyDisabled"
            // Announcement of "disabled" should always be a postfix.
          ]
        },
        "RoleNameStatePosition": {
          "join": [
            "%tree_description_with_label",
            "$node.notifySelected",
            "$node.notifyDisabled"
          ]
        },
        "NameRoleStatePosition": {
          "join": [
            "%tree_description_with_label",
            "$node.notifySelected",
            "$node.notifyDisabled"
          ]
        }
      }
    },
    "tree_description_with_label": {
      "if": "length(%label_description) > 0",
      "then": "@string/template_labeled_item(%append_description_for_tree, %label_description)",
      "else": "%append_description_for_tree"
    },
    "label_description": {
      "for_reference": "$node.labeledBy",
      "evaluate": "$node.textOrLabelOrId"
    },
    // From NodeSpeechRuleProccessor.appendDescriptionForTree()
    "append_description_for_tree": {
      "join": [
        {
          "switch": "$verbosity.descriptionOrder",
          "cases": {
            "StateNameRolePosition": "conditionalPrepend(%description_for_tree_status, %description_for_tree_nodes)",
            "RoleNameStatePosition": "conditionalAppend(%description_for_tree_nodes, %description_for_tree_status)",
            "NameRoleStatePosition": "conditionalAppend(%description_for_tree_nodes, %description_for_tree_status)"
          }
        },
        // Since error message is more valuable than a hint, its placed before the hint.
        // REFERTO.
        "$node.errorText",
        // TODO: Currently we have appended the accessibility hint just after the node details that talkback announces.
        // In future we can append $node.hint for a node similar to name, state and type and take hint into consideration for deciding verbosity.descriptionOrder.
        // These hints are only present for edit_texts and web view at present.
        "$node.hintDescription",
        "$node.uniqueTooltipText"
      ]
    },
    "description_for_tree_status": {
      "join": [
        "$node.notifyCollapsedOrExpanded",
        {
          // If we have have stateDescription, it will be in the description_for
          // tree_nodes and therefore the checked-value would be redundant.
          // switch and toggle button always have it in
          // description_for_tree_nodes.
          "if": "!$node.stateDescription && $node.isCheckable && $node.role != 'switch' && $node.role != 'toggle_button' && ($node.role != 'checked_text_view' || $node.isChecked)",
          "then": {
            "if": "$node.isChecked",
            "then": "@string/value_checked",
            "else": "@string/value_not_checked"
          }
        }
      ]
    },
    "description_for_tree_nodes": {
      "join": [
        "%get_description_for_node",
        {
          "if": "($node.role == 'grid' || $node.role == 'list' || $node.role == 'pager' || !$node.contentDescription) && $node.role != 'web_view'",
          "then": {
            // Recurse on all visible & un-focusable children, ascending.
            "join": [
              {
                "for_each_child": "$node.childrenAscending",
                "evaluate": {
                  "if": "$node.isVisible && (!$node.isAccessibilityFocusable || ($event.isWindowContentChanged && $event.sourceIsLiveRegion))",
                  "then": "%append_description_for_tree"
                }
              }
            ]
          }
        }
      ]
    },
    "get_description_for_node": {
      "fallback": [
        "$node.unlabelledDescription",
        {
          "switch": "$node.role",
          "cases": {
            "drop_down_list": "%rule_default",
            //RuleSimpleHintTemplate. Falls down to RuleDefault.
            "switch": "%rule_switch",
            "toggle_button": "%rule_switch",
            "image": "%rule_non_text_views",
            "image_button": "%rule_non_text_views",
            "edit_text": "%rule_edit_text",
            "seek_control": "%rule_seek_bar",
            "progress_bar": "%rule_seek_bar",
            "pager": "%rule_pager_page"
            // RulePager. Falls down to RuleDefault
          },
          "default": {
            // From RulePagerPage
            "if": {
              "for_reference": "$node.parent",
              "evaluate": "$node.role == 'pager' && $node.visibleChildCount == 1"
            },
            "then": "%rule_pager_page",
            "else": "%rule_default"
          }
        }
      ]
    },
    "get_role_description_or_default": {
      "if": "$verbosity.speakRole",
      "then": {
        "fallback": [
          "$node.roleDescription",
          "$node.roleName"
        ]
      }
    },
    // SpeechRules
    "rule_default": {
      "switch": "$verbosity.descriptionOrder",
      "cases": {
        "RoleNameStatePosition": "dedupJoin(%get_role_description_or_default, $node.textOrLabel, $node.stateDescription)",
        "StateNameRolePosition": "dedupJoin($node.stateDescription, $node.textOrLabel, %get_role_description_or_default)",
        "NameRoleStatePosition": "dedupJoin($node.textOrLabel, %get_role_description_or_default, $node.stateDescription)"
      }
    },
    "rule_edit_text": {
      "switch": "$verbosity.descriptionOrder",
      "cases": {
        "RoleNameStatePosition": "dedupJoin(%get_role_description_or_default, $node.editTextText, $node.editTextState)",
        "StateNameRolePosition": "dedupJoin($node.editTextState, $node.editTextText, %get_role_description_or_default)",
        "NameRoleStatePosition": "dedupJoin($node.editTextText, %get_role_description_or_default, $node.editTextState)"
      }
    },
    "rule_pager_page": {
      "switch": "$verbosity.descriptionOrder",
      "cases": {
        "RoleNameStatePosition": {
          "join": [
            "$node.pagerPageRoleDescription",
            "$node.textOrLabel",
            "%get_pager_page_state"
          ]
        },
        "StateNameRolePosition": {
          "join": [
            "%get_pager_page_state",
            "$node.textOrLabel",
            "$node.pagerPageRoleDescription"
          ]
        },
        "NameRoleStatePosition": {
          "join": [
            "$node.textOrLabel",
            "$node.pagerPageRoleDescription",
            "%get_pager_page_state"
          ]
        }
      }
    },
    "rule_switch": {
      "switch": "$verbosity.descriptionOrder",
      "cases": {
        "RoleNameStatePosition": "dedupJoin(%get_role_description_or_default, %get_switch_content, %get_switch_state)",
        "StateNameRolePosition": "dedupJoin(%get_switch_state, %get_switch_content, %get_role_description_or_default)",
        "NameRoleStatePosition": "dedupJoin(%get_switch_content, %get_role_description_or_default, %get_switch_state)"
      }
    },
    "rule_seek_bar": {
      "if": "$node.isAccessibilityFocused || $node.liveRegion != 'none'",
      "then": {
        // TODO: Investigate if we should announce role description for TYPE_VIEW_SELECTED event.
        "switch": "$verbosity.descriptionOrder",
        "cases": {
          "RoleNameStatePosition": "dedupJoin(%get_role_description_or_default, $node.textOrLabel, %get_seek_bar_state)",
          "StateNameRolePosition": "dedupJoin(%get_seek_bar_state, $node.textOrLabel, %get_role_description_or_default)",
          "NameRoleStatePosition": "dedupJoin($node.textOrLabel, %get_role_description_or_default, %get_seek_bar_state)"
        }
      }
    },
    "rule_non_text_views": {
      "switch": "$verbosity.descriptionOrder",
      "cases": {
        "RoleNameStatePosition": "dedupJoin(%get_non_text_view_role, $node.textOrLabelOrId, %get_non_text_view_state)",
        "StateNameRolePosition": "dedupJoin(%get_non_text_view_state, $node.textOrLabelOrId, %get_non_text_view_role)",
        "NameRoleStatePosition": "dedupJoin($node.textOrLabelOrId, %get_non_text_view_role, %get_non_text_view_state)"
      }
    },
    // Utils for speech rules.
    "get_pager_page_state": {
      "fallback": [
        "$node.stateDescription",
        "$event.pagerIndexCount"
      ]
    },
    "get_seek_bar_state": {
      "fallback" : [
        "$node.stateDescription",
        "%seek_bar_percent"
      ]
    },
    "seek_bar_percent" : {
      "switch": "$node.rangeInfoType",
      "cases": {
        "percent": "@string/template_percent(roundForProgressPercent($node.rangeCurrentValue))",
        "int": "@string/template_value(roundForProgressInt($node.rangeCurrentValue))",
        "float": "@string/template_value($node.rangeCurrentValue)",
        "undefined": {
          "if": "$event.itemCount > 0",
          "then": "@string/template_percent(roundForProgressPercent($event.progressPercent))"
        }
      },
      "default": "@string/template_percent(roundForProgressPercent($node.progressPercent))"
    },
    "_comment": "TODO: Move value_unlabeled out of get_non_text_view_state to rule_non_text_views, ",
    "_comment": "TODO: Refers to the comment in cl/298559232 for more detail.",
    "get_non_text_view_state": {
      "fallback": [
        "$node.stateDescription",
        {
          "if": "!$node.textOrLabelOrId",
          "then": "@string/value_unlabelled"
        }
      ]
    },
    "get_non_text_view_role": {
      "if": "$verbosity.speakRole",
      "then": {
        "fallback": [
          "$node.roleDescription",
          {
            "if": "$node.role == 'image' && $node.supportsActionSelect",
            "then": {
              "if": "$node.isAccessibilityFocused",
              "then": "@string/value_image"
            },
            "else": "$node.roleName"
          }
        ]
      }
    },
    "get_switch_content": {
      "fallback": [
        "$node.contentDescription",
        {
          "_comment": "If stateDescription is not set (android version < R)",
          "_comment": "node text will be in the get_switch_state",
          "_comment": "When stateDescription is set, we need to get text here",
          "if": "$node.stateDescription",
          "then": "$node.text"
        },
        "$node.labelText"
      ]
    },
    "get_switch_state": {
      "fallback": [
        "$node.stateDescription",
         "$node.text",
         // Text of switch widget is "on"/"off" state.
         {
            "if": "$node.isChecked",
            "then": "@string/value_on",
            "else": "@string/value_off"
         }
      ]
    },
    // HintRules

    // ProcessorAccessibilityHints.getHintFromNode()
    "get_hint_from_node": {
      "if": "$node.isEnabled",
      "then": {
        "if": "$global.enableUsageHint",
        "then": {
          "join": [
            "%get_hint_for_adjustable_child",
            {
              "switch": "$node.role",
              "cases": {
                "drop_down_list": "%hint_rule_drop_down_list",
                "edit_text": "%hint_rule_edit_text",
                "seek_control": "%hint_rule_seek_bar"
              },
              "default": "%hint_rule_default"
            },
            "$node.hintForNodeActionsHighVerbosity"
          ]
        }
      }
    },
    // Hint when focusing password-input field: use headphones to hear password.
    "get_input_focus_hint_from_node": {
      "if": "$node.isEnabled",
      "then": {
        "switch": "$node.role",
        "cases": {
          "edit_text": {
            "if": "$node.isPassword && !$global.speakPasswordsServicePolicy",
            "then": "@string/summaryOff_pref_speak_passwords_without_headphones"
          }
        }
      }
    },
    // Instance of RuleSimpleHintTemplate
    "hint_rule_drop_down_list": {
      // get_custom_hint_for_click
      "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForClick",
      "then": "@string/template_hint_spinner_keyboard($keyCombo.stringRepresentationForClick)",
      "else": {
        "if": "$global.inputMode == 'non_alphabetic_keyboard'",
        "then": "@string/template_hint_spinner(@string/value_press_select)",
        "else": {
          "if": "$node.role != 'text_entry_key' && (!$global.isInterpretAsEntryKey || !$node.isImeWindow)",
          "then": {
            "if": "$global.useSingleTap",
            "then": "@string/template_hint_spinner(@string/value_single_tap)",
            "else": "@string/template_hint_spinner(@string/value_double_tap)"
          }
        }
      }
    },
    "hint_rule_edit_text": {
      "join": [
        {
          "if": "!$node.isFocused",
          "then": {
            // get_custom_hint_for_click
            "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForClick",
            "then": "@string/template_hint_edit_text_keyboard($keyCombo.stringRepresentationForClick)",
            "else": {
              "if": "$global.inputMode == 'non_alphabetic_keyboard'",
              "then": "@string/template_hint_edit_text(@string/value_press_select)",
              "else": {
                "if": "$node.role != 'text_entry_key' && (!$global.isInterpretAsEntryKey || !$node.isImeWindow)",
                "then": {
                  "if": "$global.useSingleTap",
                  "then": "@string/template_hint_edit_text(@string/value_single_tap)",
                  "else": "@string/template_hint_edit_text(@string/value_double_tap)"
                }
              }
            }
          }
        },
        "%get_hint_for_long_click",
        {
          "if": "$node.typoCount > 0 && $global.supportTextSuggestion",
          "then": "@string/template_hint_edit_text_containing_typo($node.typoCount, $gesture.readingMenuNextSettingShortcut)"
        }
      ]
    },
    "get_hint_for_adjustable_child": {
      "if": {
        "for_reference": "$node.parent",
        "evaluate": "$node.role == 'number_picker' && ($node.supportsActionScrollForward || $node.supportsActionScrollBackward)"
      },
      "then": "$global.adjustableHint"
    },
    "hint_rule_seek_bar": {
      "if": "$node.supportsActionScrollForward || $node.supportsActionScrollBackward",
      "then": "$global.adjustableHint",
      "else": "%hint_rule_default"
    },
    "hint_rule_default": {
      "join": [
        "%get_hint_for_click",
        "%get_hint_for_long_click"
      ]
    },
    // Utils.
    "get_hint_for_long_click": {
      "fallback": [
        {
          "for_reference": "$node.actionLongClick",
          "evaluate": {
            "if": "$action.label",
            "then": {
              "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForLongClick",
              "then": "@string/template_custom_hint_for_actions_keyboard($keyCombo.stringRepresentationForLongClick, $action.label)",
              "else": {
                "if": "$global.inputMode == 'non_alphabetic_keyboard'",
                "then": "@string/template_custom_hint_for_long_clickable_actions(@string/value_press_select, $action.label)",
                "else": {
                  "if": "!$node.isImeWindow",
                  "then": "@string/template_custom_hint_for_long_clickable_actions(@string/value_double_tap, $action.label)"
                }
              }
            }
          }
        },
        {
          "if": "$node.isLongClickable",
          "then": {
            "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForLongClick",
            "then": "@string/template_hint_long_clickable_keyboard($keyCombo.stringRepresentationForLongClick)",
            "else": {
              "if": "$global.inputMode == 'non_alphabetic_keyboard'",
              "then": "@string/template_hint_long_clickable(@string/value_press_select)",
              "else": {
                "if": "!$node.isImeWindow",
                "then": "@string/template_hint_long_clickable(@string/value_double_tap)"
              }
            }
          }
        }
      ]
    },
    "get_hint_for_click": {
      "fallback": [
        {
          "for_reference": "$node.actionClick",
          "evaluate": {
            "if": "$action.label",
            "then": {
              "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForClick",
              "then": "@string/template_custom_hint_for_actions_keyboard($keyCombo.stringRepresentationForClick, $action.label)",
              "else": {
                "if": "$global.inputMode == 'non_alphabetic_keyboard'",
                "then": "@string/template_custom_hint_for_actions(@string/value_press_select, $action.label)",
                "else": {
                    "if": "$node.role != 'text_entry_key' && (!$global.isInterpretAsEntryKey || !$node.isImeWindow)",
                    "then": {
                      "if": "$global.useSingleTap",
                      "then": "@string/template_custom_hint_for_actions(@string/value_single_tap, $action.label)",
                      "else": "@string/template_custom_hint_for_actions(@string/value_double_tap, $action.label)"
                    }
                }
              }
            }
          }
        },
        {
          "if": "$collection.selectionMode == 'single'",
          "then": {
            "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForClick",
            "then": "@string/template_hint_single_selection_item_keyboard($keyCombo.stringRepresentationForClick)",
            "else": {
              "if": "$global.inputMode == 'non_alphabetic_keyboard'",
              "then": "@string/template_hint_single_selection_item(@string/value_press_select)",
              "else": {
                "if": "$node.role != 'text_entry_key' && (!$global.isInterpretAsEntryKey || !$node.isImeWindow)",
                "then":{
                  "if": "$node.isClickable",
                  "then": {
                    "if": "$global.useSingleTap",
                    "then": "@string/template_hint_single_selection_item(@string/value_single_tap)",
                    "else": "@string/template_hint_single_selection_item(@string/value_double_tap)"
                  }
                }
              }
            }
          }
        },
        {
          "if": "$node.isCheckable",
          "then": {
            "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForClick",
            "then": "@string/template_hint_checkable_keyboard($keyCombo.stringRepresentationForClick)",
            "else": {
              "if": "$global.inputMode == 'non_alphabetic_keyboard'",
              "then": "@string/template_hint_checkable(@string/value_press_select)",
              "else": {
                "if": "$node.role != 'text_entry_key' && (!$global.isInterpretAsEntryKey || !$node.isImeWindow)",
                "then":{
                  "if": "$node.isClickable",
                  "then": {
                    "if": "$global.useSingleTap",
                    "then": "@string/template_hint_checkable(@string/value_single_tap)",
                    "else": "@string/template_hint_checkable(@string/value_double_tap)"
                  }
                }
              }
            }
          }
        },
        {
          "if": "$node.isClickable",
          "then": {
            "if": "$global.inputMode == 'keyboard' && $keyCombo.hasKeyForClick",
            "then": "@string/template_hint_clickable_keyboard($keyCombo.stringRepresentationForClick)",
            "else": {
              "if": "$global.inputMode == 'non_alphabetic_keyboard'",
              "then": "@string/template_hint_clickable(@string/value_press_select)",
              "else": {
                "if": "$node.role != 'text_entry_key' && (!$global.isInterpretAsEntryKey || !$node.isImeWindow)",
                "then": {
                  "if": "$global.useSingleTap",
                  "then": "@string/template_hint_clickable(@string/value_single_tap)",
                  "else": "@string/template_hint_clickable(@string/value_double_tap)"
                }
              }
            }
          }
        }
      ]
    }
  }
}
